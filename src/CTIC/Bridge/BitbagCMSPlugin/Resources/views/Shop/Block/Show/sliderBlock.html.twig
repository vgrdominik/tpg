<section class="section-slide">
    <div class="wrap-slick1 slick_{{ block.translation.slider.id }}">
        <div class="slick1">
            {% for slideElement in block.translation.slider.elements %}
                {% set image = slideElement.images|last %}
                <div class="item-slick1 w-full"  style="background: url('{{ image.path|imagine_filter('slide') }}');">
                    <div class="layer-slick1 animated visible-false item-slick1-image">
                        &nbsp;
                    </div>
                    <div class="sui h-full">
                        <div class="ui container h-full">
                            <div class="flex-col-l-m h-full p-t-100 p-b-30 p-l-20 respon5">
                                <div class="layer-slick1 animated visible-false" data-appear="{{ slideElement.titleAnimation }}" data-delay="0">
                                <span class="ltext-101 cl2 respon2">
                                    {{ slideElement.title }}
                                </span>
                                </div>

                                <div class="layer-slick1 animated visible-false" data-appear="{{ slideElement.mainPhraseAnimation }}" data-delay="800">
                                    <h2 class="ltext-201 cl2 p-t-19 p-b-43 respon1">
                                        {{ slideElement.mainPhrase }}
                                    </h2>
                                </div>

                                <div class="layer-slick1 animated visible-false" data-appear="{{ slideElement.linkAnimation }}" data-delay="1600">
                                    <a href="{{ slideElement.link }}" title="{{ slideElement.linkText }}" class="item-slick1-btn">
                                        {{ slideElement.linkText }}
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
</section>

{% if block.products|length > 0 %}
    <section class="sec-relate-product bg0 p-t-30">
        <div class="container center-layer">
            {% include '@SyliusShop/Product/_horizontalList.html.twig' with {'products': block.products} %}
        </div>
    </section>
{% endif %}

<script type="application/javascript">
    var slider{{ block.translation.slider.id }}Callback = function(){

        /*==================================================================
        [ Slick1 ]*/
        var wrapSlick1 = $('.slick_{{ block.translation.slider.id }}');
        var slick1 = wrapSlick1.find('.slick1');


        var itemSlick1 = $(slick1).find('.item-slick1');
        var layerSlick1 = $(slick1).find('.layer-slick1');
        var actionSlick1 = [];


        $(slick1).on('init', function(){
            var layerCurrentItem = $(itemSlick1[0]).find('.layer-slick1');

            for(var i=0; i<actionSlick1.length; i++) {
                clearTimeout(actionSlick1[i]);
            }

            $(layerSlick1).each(function(){
                $(this).removeClass($(this).data('appear') + ' visible-true');
            });

            for(var i=0; i<layerCurrentItem.length; i++) {
                actionSlick1[i] = setTimeout(function(index) {
                    $(layerCurrentItem[index]).addClass($(layerCurrentItem[index]).data('appear') + ' visible-true');
                },$(layerCurrentItem[i]).data('delay'),i);
            }
        });

        $(slick1).slick({
            accessibility: {{ block.translation.slider.accessibility? 'true' : 'false'  }},
            adaptiveHeight: {{ block.translation.slider.adaptiveHeight? 'true' : 'false'  }},
            autoplay: {{ block.translation.slider.autoplay? 'true' : 'false'  }},
            autoplaySpeed: {{ block.translation.slider.autoplaySpeed }},
            arrows: {{ block.translation.slider.arrows? 'true' : 'false'  }},
            centerMode: {{ block.translation.slider.centerMode? 'true' : 'false'  }},
            centerPadding: '{{ block.translation.slider.centerPadding  }}',
            dots: {{ block.translation.slider.dots? 'true' : 'false'  }},
            draggable: {{ block.translation.slider.draggable? 'true' : 'false'  }},
            fade: {{ block.translation.slider.fade? 'true' : 'false'  }},
            infinite: {{ block.translation.slider.infinite? 'true' : 'false'  }},
            pauseOnFocus: {{ block.translation.slider.pauseOnFocus? 'true' : 'false'  }},
            pauseOnHover: {{ block.translation.slider.pauseOnHover? 'true' : 'false'  }},
            pauseOnDotsHover: {{ block.translation.slider.pauseOnDotsHover? 'true' : 'false'  }},
            rows: {{ block.translation.slider.rows  }},
            slidesPerRow: {{ block.translation.slider.slidesPerRow  }},
            slidesToShow: {{ block.translation.slider.slidesToShow  }},
            slidesToScroll: {{ block.translation.slider.slidesToScroll  }},
            speed: {{ block.translation.slider.speed  }},
            swipe: {{ block.translation.slider.swipe? 'true' : 'false'  }},
            swipeToSlide: {{ block.translation.slider.swipeToSlide? 'true' : 'false'  }},
            touchMove: {{ block.translation.slider.touchMove? 'true' : 'false'  }},
            waitForAnimate: {{ block.translation.slider.waitForAnimate? 'true' : 'false'  }},
            {% if block.translation.slider.arrows == TRUE %}
                appendArrows: $(wrapSlick1),
                prevArrow:'<span class="arrow-slick1 prev-slick1"><i class="zmdi zmdi-caret-left"></i></span>',
                nextArrow:'<span class="arrow-slick1 next-slick1"><i class="zmdi zmdi-caret-right"></i></span>',
            {% endif %}
        });

        $(slick1).on('afterChange', function(event, slick, currentSlide){

            var layerCurrentItem = $(itemSlick1[currentSlide]).find('.layer-slick1');

            for(var i=0; i<actionSlick1.length; i++) {
                clearTimeout(actionSlick1[i]);
            }

            $(layerSlick1).each(function(){
                $(this).removeClass($(this).data('appear') + ' visible-true');
            });

            for(var i=0; i<layerCurrentItem.length; i++) {
                actionSlick1[i] = setTimeout(function(index) {
                    $(layerCurrentItem[index]).addClass($(layerCurrentItem[index]).data('appear') + ' visible-true');
                },$(layerCurrentItem[i]).data('delay'),i);
            }

        });

    };

    if (document.readyState === "complete"){
        slider{{ block.translation.slider.id }}Callback();
    }else if (document.addEventListener){
        document.addEventListener('DOMContentLoaded', slider{{ block.translation.slider.id }}Callback);
    }else document.attachEvent('onreadystatechange', function(){
        // IE <= 8
        if (document.readyState=='complete'){
            slider{{ block.translation.slider.id }}Callback();
        }
    });
</script>
